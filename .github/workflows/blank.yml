指针的作用：间接访问地址


函数的分文件

#include<iostream>
#include<string>
using namespace std;
#include"swap.h"


// 1、创建.h后缀名的头文件 
//2、创建.cpp后缀名的源文件 
//3、在头文件中写函数的声明 
//4、在源文件中先函数的定义

int main()
{
	int a = 10;
	int b = 20;
	swap(a, b);

	
		system("pause");
		return 0;
	}

 头文件

#include<iostream>
using namespace std;

//函数的声明
void swap(int a, int b); 

源文件
#include"swap.h"


//函数的定义
void swap(int a, int b)
{
	int temp = a;
	a = b;
	b = temp;

	cout << "a=" << a << endl;
	cout << "b=" << b << endl;
}

指针
#include<iostream>
#include<string>
using namespace std;


int main()
{
	//定义指针
	int a = 10;
	//指针定义的语法：数据类型 *指针变量名；
	int* p;
	//让指针记录变量a的地址
	p = &a;

	cout << "a的地址为：" << &a << endl;
	cout << "z指针P的地址为：" << p << endl;
	//使用指针
	//可以通过解引用的方式来找到指针指向的内存
	//指针前加*代表解引用，找到指针指向的内存中的数据

	*p = 1000;
	cout << "a=" << a << endl;
	cout << "*p=" << *p << endl;


	
		system("pause");
		return 0;
	}


指针常量与常量指针

#include<iostream>
#include<string>
using namespace std;


int main()
{
  //1.const修饰指针，常量指针
	int a = 10;
	int b = 10;

	const int * p = &a;
	//指针指向的值不可以改，指针的指向可以改
	//*p = 20;错误
	//p = &b;正确
	//2.const修饰常量，指针常量
	//指针的指向不可以改，指针指向的值可以改
	int* const p2 = &a;
	*p2 = 100;//正确
	p2 = &b;//错误

	//3.coust修饰指针和常量
	const int* const p3 = &a;
	//指针的方向和值都不可以改变
	
	
		system("pause");
		return 0;
	}


指针与数组

#include<iostream>
#include<string>
using namespace std;


int main()
{
	 //指针和数组
	//利用指针访问数组中的元素

	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
	//cout << "第一个元素为：" << arr[0] << endl;
 
	int * p = arr;//arr就是数组的首地址
	 
	cout << "第一个元素为：" << *p << endl;
	p++;//让指针向后偏移4个字节
	cout << "第二个数为：" << *p<<endl;

	cout << "利用指针遍历数组" << endl;
	int* p2 = arr;
	for (int i = 0; i < 10; i++)
	{
		//cout << arr[i] << endl;
		cout << *p2 << endl;
		p2++;
	}
	
	
		system("pause");
		return 0;
	}


指针与函数

#include<iostream>
#include<string>
using namespace std;

void swap(int* p1, int* p2)
{
	int temp = *p1;
	*p1 = *p2;
	*p2 = temp;


}

int main()
{
	//函数与指针
	int a = 10;
	int b = 20;
	cout << "a=" << a << endl;
	cout << "b=" << b << endl;
//地址传递
	swap(&a, &b);

	cout << "a=" << a << endl;
	cout << "b=" << b << endl;
	
		system("pause");
		return 0;
	}
