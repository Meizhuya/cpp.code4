指针的作用：间接访问地址


函数的分文件

#include<iostream>
#include<string>
using namespace std;
#include"swap.h"


// 1、创建.h后缀名的头文件 
//2、创建.cpp后缀名的源文件 
//3、在头文件中写函数的声明 
//4、在源文件中先函数的定义

int main()
{
	int a = 10;
	int b = 20;
	swap(a, b);

	
		system("pause");
		return 0;
	}

 头文件

#include<iostream>
using namespace std;

//函数的声明
void swap(int a, int b); 

源文件
#include"swap.h"


//函数的定义
void swap(int a, int b)
{
	int temp = a;
	a = b;
	b = temp;

	cout << "a=" << a << endl;
	cout << "b=" << b << endl;
}

指针
#include<iostream>
#include<string>
using namespace std;


int main()
{
	//定义指针
	int a = 10;
	//指针定义的语法：数据类型 *指针变量名；
	int* p;
	//让指针记录变量a的地址
	p = &a;

	cout << "a的地址为：" << &a << endl;
	cout << "z指针P的地址为：" << p << endl;
	//使用指针
	//可以通过解引用的方式来找到指针指向的内存
	//指针前加*代表解引用，找到指针指向的内存中的数据

	*p = 1000;
	cout << "a=" << a << endl;
	cout << "*p=" << *p << endl;


	
		system("pause");
		return 0;
	}
